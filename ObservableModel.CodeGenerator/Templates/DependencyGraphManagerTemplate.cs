// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ObservableModel.CodeGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class DependencyGraphManagerTemplate : DependencyGraphManagerTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("﻿");
            this.Write("\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Sys" +
                    "tem.Runtime.CompilerServices;\r\nusing System.Text;\r\nusing System.Threading.Tasks;" +
                    "\r\n\r\nnamespace ObservableModel.CodeGenerator\r\n{\r\n    public delegate Task NotifyD" +
                    "ependencyNodeDelegateAsync();\r\n\r\n    public class DependencyGraphManager\r\n    {\r" +
                    "\n        private Task notifyPropertyChangedTask;\r\n        private const string T" +
                    "HIS_VM = \"this\";\r\n        private Dictionary<string, NotifyDependencyNodeDelegat" +
                    "eAsync> notifyDependencyNodeDelegates;\r\n\r\n        public DependencyGraphManager(" +
                    "IObservableModel vm)\r\n        {\r\n            this.ViewModels = new Dictionary<st" +
                    "ring, IObservableModel>();\r\n            this.DependencyGraph = new List<KeyValue" +
                    "Pair<string, string>>();\r\n            this.notifyDependencyNodeDelegates = new D" +
                    "ictionary<string, NotifyDependencyNodeDelegateAsync>();\r\n            this.Initia" +
                    "lize(vm);\r\n        }\r\n\r\n        public Dictionary<string, IObservableModel> View" +
                    "Models;\r\n\r\n        public void Initialize(IObservableModel vm)\r\n        {\r\n     " +
                    "       this.ViewModels[THIS_VM] = vm;\r\n\r\n            // properties\r\n            " +
                    "var properties = vm.GetType().GetProperties(System.Reflection.BindingFlags.Publi" +
                    "c | System.Reflection.BindingFlags.Instance);\r\n            foreach(var property " +
                    "in properties)\r\n            {\r\n                var dependencies = property.GetCu" +
                    "stomAttributes(typeof(DependsOnAttribute), false);\r\n                if (dependen" +
                    "cies.Length > 0)\r\n                {\r\n                    var from = this.CreateD" +
                    "ependencyNodeName(THIS_VM, property.Name);\r\n                    if (!this.notify" +
                    "DependencyNodeDelegates.ContainsKey(property.Name))\r\n                    {\r\n    " +
                    "                    this.notifyDependencyNodeDelegates.Add(property.Name, async " +
                    "() => await Task.Run(() => vm.OnPropertyChange(property.Name)));\r\n              " +
                    "      }\r\n                    foreach (var dependency in dependencies)\r\n         " +
                    "           {\r\n                        var dependencyPaths = (dependency as Depen" +
                    "dsOnAttribute).Properties;\r\n                        var to = this.CreateDependen" +
                    "cyNodeName(THIS_VM, dependencyPaths);\r\n                        this.DependencyGr" +
                    "aph.Add(new KeyValuePair<string, string>(from, to));\r\n                    }\r\n   " +
                    "             }\r\n            }\r\n\r\n            // update handler\r\n            var " +
                    "methods = vm.GetType().GetMethods(System.Reflection.BindingFlags.Public | System" +
                    ".Reflection.BindingFlags.Instance);\r\n            foreach(var method in methods)\r" +
                    "\n            {\r\n                var from = this.CreateDependencyNodeName(THIS_VM" +
                    ", method.Name);\r\n                var dependencies = method.GetCustomAttributes(t" +
                    "ypeof(DependsOnAttribute), false);\r\n                if (dependencies.Length > 0)" +
                    "\r\n                {\r\n                    if (!this.notifyDependencyNodeDelegates" +
                    ".ContainsKey(method.Name))\r\n                    {\r\n                        var f" +
                    "un = (NotifyDependencyNodeDelegateAsync)method.CreateDelegate(typeof(NotifyDepen" +
                    "dencyNodeDelegateAsync), vm);\r\n                        this.notifyDependencyNode" +
                    "Delegates.Add(method.Name, async () => await fun());\r\n                    }\r\n\r\n " +
                    "                   foreach(var dependency in dependencies)\r\n                    " +
                    "{\r\n                        var dependencyPaths = (dependency as DependsOnAttribu" +
                    "te).Properties;\r\n                        var to = this.CreateDependencyNodeName(" +
                    "THIS_VM, dependencyPaths);\r\n                        this.DependencyGraph.Add(new" +
                    " KeyValuePair<string, string>(from, to));\r\n                    }\r\n              " +
                    "  }\r\n\r\n                var updates = method.GetCustomAttributes(typeof(UpdateAtt" +
                    "ribute), false);\r\n                if (updates.Length > 0)\r\n                {\r\n  " +
                    "                  if (!this.notifyDependencyNodeDelegates.ContainsKey(method.Nam" +
                    "e))\r\n                    {\r\n                        var fun = (NotifyDependencyN" +
                    "odeDelegateAsync)method.CreateDelegate(typeof(NotifyDependencyNodeDelegateAsync)" +
                    ", vm);\r\n                        this.notifyDependencyNodeDelegates.Add(method.Na" +
                    "me, () => fun());\r\n                    }\r\n\r\n                    foreach (var upd" +
                    "ate in updates)\r\n                    {\r\n                        var dependencyPa" +
                    "th = (update as UpdateAttribute).Property;\r\n                        var to = thi" +
                    "s.CreateDependencyNodeName(THIS_VM, dependencyPath);\r\n                        th" +
                    "is.DependencyGraph.Add(new KeyValuePair<string, string>(to, from));\r\n\r\n         " +
                    "               // if \'to\' is thisVM\'s property, add notifyDependencyNodeDelegate" +
                    "s.\r\n                        if (!this.notifyDependencyNodeDelegates.ContainsKey(" +
                    "dependencyPath))\r\n                        {\r\n                            this.no" +
                    "tifyDependencyNodeDelegates.Add(dependencyPath, () => Task.Run(() => vm.OnProper" +
                    "tyChange(dependencyPath)));\r\n                        }\r\n                    }\r\n " +
                    "               }\r\n            }\r\n        }\r\n\r\n        public void NotifyProperty" +
                    "Change([CallerMemberName] string propertyName = null)\r\n        {\r\n            th" +
                    "is.notifyPropertyChangedTask = Task.Run(async () =>\r\n            {\r\n            " +
                    "    this.ViewModels[THIS_VM].OnPropertyChange(propertyName);\r\n                aw" +
                    "ait this.TryExecuteNotifyDependencyNodeDelegateAsync(propertyName);\r\n           " +
                    " });\r\n        }\r\n\r\n        public async Task WaitForDependencyUpdateCompleteAsyn" +
                    "c()\r\n        {\r\n            if (this.notifyPropertyChangedTask != null)\r\n       " +
                    "     {\r\n                await this.notifyPropertyChangedTask;\r\n            }\r\n  " +
                    "      }\r\n\r\n        public void RegisterViewModel<T>(T? vm, [CallerMemberName]str" +
                    "ing prefix=\"\") where T: IObservableModel\r\n        {\r\n            if(vm == null)\r" +
                    "\n            {\r\n                return;\r\n            }\r\n\r\n            prefix = t" +
                    "his.CreateDependencyNodeName(THIS_VM, prefix);\r\n            var vmId = this.Crea" +
                    "teViewModelId<T>();\r\n            this.ViewModels[vmId] = vm;\r\n            var de" +
                    "pendencyNodes = vm.DependencyGraphManager.DependencyGraph.Where(kv => kv.Value.S" +
                    "tartsWith(prefix));\r\n            IEnumerable<KeyValuePair<string, string>> subGr" +
                    "aph = new List<KeyValuePair<string, string>>();\r\n            foreach(var depende" +
                    "ncyNode in dependencyNodes)\r\n            {\r\n                vm.DependencyGraphMa" +
                    "nager.CalculateNodeDependencies(dependencyNode.Value, ref subGraph);\r\n          " +
                    "  }\r\n\r\n            // register vm in vm.ViewModels\r\n            foreach(var node" +
                    " in subGraph.SelectMany(kv => new[] {kv.Key, kv.Value }).Distinct())\r\n          " +
                    "  {\r\n                var viewModelId = this.GetViewModelIdFromDependencyPath(nod" +
                    "e);\r\n                var newViewModelId = viewModelId == THIS_VM ? vmId : $\"{vmI" +
                    "d}.{viewModelId}\";\r\n                if (!this.ViewModels.ContainsKey(newViewMode" +
                    "lId) && vm.DependencyGraphManager.ViewModels.ContainsKey(viewModelId))\r\n        " +
                    "        {\r\n                    this.ViewModels.Add(newViewModelId, vm.Dependency" +
                    "GraphManager.ViewModels[viewModelId]);\r\n                }\r\n            }\r\n\r\n    " +
                    "        foreach(var kv in subGraph)\r\n            {\r\n                string updat" +
                    "eVMId(string node)\r\n                {\r\n                    if (node.Contains(pre" +
                    "fix))\r\n                    {\r\n                        return node.Replace(prefix" +
                    ", THIS_VM);\r\n                    }\r\n                    else if(node.Contains(TH" +
                    "IS_VM))\r\n                    {\r\n                        return node.Replace(THIS" +
                    "_VM, vmId);\r\n                    }\r\n                    else\r\n                  " +
                    "  {\r\n                        return $\"{vmId}.{node}\";\r\n                    }\r\n  " +
                    "              }\r\n\r\n                this.DependencyGraph.Add(new KeyValuePair<str" +
                    "ing, string>(updateVMId(kv.Key), updateVMId(kv.Value)));\r\n            }\r\n       " +
                    " }\r\n\r\n        public void UnregisterViewModel<T>(T vm) where T: IObservableModel" +
                    "\r\n        {\r\n            var vmKv = this.ViewModels.Where(kv => kv.Value.Equals(" +
                    "vm)).FirstOrDefault();\r\n            if(vmKv is KeyValuePair<string, IObservableM" +
                    "odel> kv)\r\n            {\r\n                var vmId = kv.Key;\r\n                th" +
                    "is.ViewModels.Remove(kv.Key);\r\n                this.DependencyGraph.RemoveAll(va" +
                    "l => val.Key.StartsWith(vmId) || val.Value.StartsWith(vmId));\r\n            }\r\n  " +
                    "      }\r\n\r\n        private string CreateViewModelId<T>() where T : IObservableMo" +
                    "del\r\n        {\r\n            var index = this.ViewModels.Keys.Where(k => k.Contai" +
                    "ns(typeof(T).Name)).Count();\r\n            return $\"{typeof(T).Name}_{index}\";\r\n " +
                    "       }\r\n\r\n        public async Task<bool> TryExecuteNotifyDependencyNodeDelega" +
                    "teAsync(string node)\r\n        {\r\n            try\r\n            {\r\n               " +
                    " var prefix = this.CreateDependencyNodeName(THIS_VM, node);\r\n                var" +
                    " dependencyNodes = this.DependencyGraph.Where(kv => kv.Value.StartsWith(prefix))" +
                    ";\r\n                IEnumerable<KeyValuePair<string, string>> subGraph = new List" +
                    "<KeyValuePair<string, string>>();\r\n                foreach (var dependencyNode i" +
                    "n dependencyNodes)\r\n                {\r\n                    this.CalculateNodeDep" +
                    "endencies(dependencyNode.Value, ref subGraph);\r\n                }\r\n\r\n           " +
                    "     var edges = subGraph.Select(x => new Tuple<string, string>(x.Value, x.Key))" +
                    ".Distinct().OrderBy(kv => kv.Item1).ToList();\r\n                var nodes = subGr" +
                    "aph.SelectMany(x => new[] { x.Key, x.Value }).Distinct().OrderBy(k => k).ToList(" +
                    ");\r\n                var sortedNodes = this.TopologicalSort(nodes, edges);\r\n     " +
                    "           foreach (var sortedNode in sortedNodes)\r\n                {\r\n         " +
                    "           var vmId = this.GetViewModelIdFromDependencyPath(sortedNode);\r\n      " +
                    "              var dependencyFullPath = this.GetDependencyNameFromDependencyPath(" +
                    "sortedNode);\r\n                    if(this.ViewModels.ContainsKey(vmId) && this.V" +
                    "iewModels[vmId].DependencyGraphManager.notifyDependencyNodeDelegates.TryGetValue" +
                    "(dependencyFullPath, out var fun))\r\n                    {\r\n                     " +
                    "   await fun();\r\n                    }\r\n                }\r\n\r\n                ret" +
                    "urn true;\r\n            }\r\n            catch (Exception)\r\n            {\r\n        " +
                    "        return false;\r\n            }\r\n        }\r\n\r\n        private void Calculat" +
                    "eNodeDependencies(string node, ref IEnumerable<KeyValuePair<string, string>> gra" +
                    "ph)\r\n        {\r\n            // BFS\r\n            var edges = this.DependencyGraph" +
                    ".Where(kv => kv.Value == node).ToList();\r\n            \r\n            if(edges.Cou" +
                    "nt() == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n           " +
                    " graph = graph.Concat(edges).Distinct();\r\n            foreach(var edge in edges)" +
                    "\r\n            {\r\n                this.CalculateNodeDependencies(edge.Key, ref gr" +
                    "aph);\r\n            }\r\n        }\r\n\r\n        private List<T> TopologicalSort<T>(IE" +
                    "numerable<T> nodes, List<Tuple<T, T>> edges) where T : IEquatable<T>\r\n        {\r" +
                    "\n            // Empty list that will contain the sorted elements\r\n            va" +
                    "r L = new List<T>();\r\n\r\n            // Set of all nodes with no incoming edges\r\n" +
                    "            var S = new HashSet<T>(nodes.Where(n => edges.All(e => e.Item2.Equal" +
                    "s(n) == false)));\r\n\r\n            // while S is non-empty do\r\n            while (" +
                    "S.Any())\r\n            {\r\n\r\n                //  remove a node n from S\r\n         " +
                    "       var n = S.First();\r\n                S.Remove(n);\r\n\r\n                // ad" +
                    "d n to tail of L\r\n                L.Add(n);\r\n\r\n                // for each node " +
                    "m with an edge e from n to m do\r\n                foreach (var e in edges.Where(e" +
                    " => e.Item1.Equals(n)).ToList())\r\n                {\r\n                    var m =" +
                    " e.Item2;\r\n\r\n                    // remove edge e from the graph\r\n              " +
                    "      edges.Remove(e);\r\n\r\n                    // if m has no other incoming edge" +
                    "s then\r\n                    if (edges.All(me => me.Item2.Equals(m) == false))\r\n " +
                    "                   {\r\n                        // insert m into S\r\n              " +
                    "          S.Add(m);\r\n                    }\r\n                }\r\n            }\r\n\r\n" +
                    "            // if graph has edges then\r\n            if (edges.Any())\r\n          " +
                    "  {\r\n                // return error (graph has at least one cycle)\r\n           " +
                    "     return null;\r\n            }\r\n            else\r\n            {\r\n             " +
                    "   // return L (a topologically sorted order)\r\n                return L;\r\n      " +
                    "      }\r\n        }\r\n\r\n        public List<KeyValuePair<string, string>> Dependen" +
                    "cyGraph { get; }\r\n\r\n        private string CreateDependencyNodeName(string vmId," +
                    " params string[] propertyNames) => $\"{vmId}.{string.Join(\".\", propertyNames)}\";\r" +
                    "\n\r\n        private string GetViewModelIdFromDependencyPath(string path) => strin" +
                    "g.Join(\".\", path.Split(\'.\').Reverse().Skip(1).Reverse());\r\n\r\n        private str" +
                    "ing GetDependencyNameFromDependencyPath(string path) => path.Split(\'.\').Last();\r" +
                    "\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal class DependencyGraphManagerTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
